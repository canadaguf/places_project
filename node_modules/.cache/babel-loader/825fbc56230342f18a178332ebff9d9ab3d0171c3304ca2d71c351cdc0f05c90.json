{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ilya\\\\places_project\\\\src\\\\scenes\\\\features\\\\ListInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Typography, Container, Paper, CircularProgress, Button, List, ListItem, ListItemText, Divider, Grid, Box, TextField, Snackbar, Alert, IconButton } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete'; // Import the delete icon\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst backendUrl = \"https://places-project-6i0r.onrender.com\";\nconst ListInfo = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the list ID from the URL\n  const [list, setList] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newPlaceName, setNewPlaceName] = useState(''); // State for place name input\n  const [newUsername, setNewUsername] = useState(''); // State for username input\n  const [snackbarOpen, setSnackbarOpen] = useState(false); // State for Snackbar\n  const [snackbarMessage, setSnackbarMessage] = useState(''); // Snackbar message\n  const [isAdmin, setIsAdmin] = useState(false); // State to track if the current user is an admin\n  const mapRef = useRef(null);\n\n  // Fetch list details, places, and users\n  useEffect(() => {\n    const fetchListData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.user_id;\n\n        // Fetch list details\n        const listResponse = await axios.get(`${backendUrl}/api/lists/${id}`);\n        setList(listResponse.data.list);\n\n        // Fetch places in the list\n        const placesResponse = await axios.get(`${backendUrl}/api/lists/${id}/places`);\n        setPlaces(placesResponse.data.places);\n\n        // Fetch users connected to the list\n        const usersResponse = await axios.get(`${backendUrl}/api/lists/${id}/users`);\n        setUsers(usersResponse.data.users);\n\n        // Fetch the current user's admin status for the list\n        const adminStatusResponse = await axios.get(`${backendUrl}/api/lists/${id}/admin-status`, {\n          headers: {\n            Authorization: token\n          }\n        });\n        setIsAdmin(adminStatusResponse.data.is_admin);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching list data:', error);\n        setLoading(false);\n      }\n    };\n    fetchListData();\n  }, [id]);\n\n  // Handle adding a new place to the list\n  const handleAddPlace = async () => {\n    try {\n      // Search for the place by name\n      const searchResponse = await axios.get(`${backendUrl}/api/places`, {\n        params: {\n          name: newPlaceName\n        }\n      });\n      const foundPlaces = searchResponse.data.places;\n      if (foundPlaces.length === 0) {\n        // No place found\n        setSnackbarMessage('Place not found');\n        setSnackbarOpen(true);\n        return;\n      }\n\n      // Use the first matching place (you can add logic to handle multiple matches)\n      const placeId = foundPlaces[0].id;\n\n      // Add the place to the list\n      const token = localStorage.getItem('token');\n      await axios.post(`${backendUrl}/api/lists/${id}/places`, {\n        place_id: placeId\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n\n      // Clear the input field\n      setNewPlaceName('');\n\n      // Refetch places after adding a new place\n      const placesResponse = await axios.get(`${backendUrl}/api/lists/${id}/places`);\n      setPlaces(placesResponse.data.places);\n\n      // Notify the user\n      setSnackbarMessage('Place added successfully');\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error('Error adding place to list:', error);\n      setSnackbarMessage('Failed to add place. Please try again.');\n      setSnackbarOpen(true);\n    }\n  };\n\n  // Handle adding a new user to the list\n  const handleAddUser = async () => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Add the user to the list\n      await axios.post(`${backendUrl}/api/lists/${id}/users`, {\n        username: newUsername\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n\n      // Clear the input field\n      setNewUsername('');\n\n      // Refetch users after adding a new user\n      const usersResponse = await axios.get(`${backendUrl}/api/lists/${id}/users`);\n      setUsers(usersResponse.data.users);\n\n      // Notify the user\n      setSnackbarMessage('User added successfully');\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error('Error adding user to list:', error);\n      setSnackbarMessage('Failed to add user. Please try again.');\n      setSnackbarOpen(true);\n    }\n  };\n\n  // Handle deleting a place from the list\n  const handleDeletePlace = async placeId => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Delete the place from the list\n      await axios.delete(`${backendUrl}/api/lists/${id}/places/${placeId}`, {\n        headers: {\n          Authorization: token\n        }\n      });\n\n      // Refetch places after deletion\n      const placesResponse = await axios.get(`${backendUrl}/api/lists/${id}/places`);\n      setPlaces(placesResponse.data.places);\n\n      // Notify the user\n      setSnackbarMessage('Place deleted successfully');\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error('Error deleting place:', error);\n      setSnackbarMessage('Failed to delete place. Please try again.');\n      setSnackbarOpen(true);\n    }\n  };\n\n  // Handle deleting a user from the list\n  const handleDeleteUser = async userId => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Delete the user from the list\n      await axios.delete(`${backendUrl}/api/lists/${id}/users/${userId}`, {\n        headers: {\n          Authorization: token\n        }\n      });\n\n      // Refetch users after deletion\n      const usersResponse = await axios.get(`${backendUrl}/api/lists/${id}/users`);\n      setUsers(usersResponse.data.users);\n\n      // Notify the user\n      setSnackbarMessage('User deleted successfully');\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      setSnackbarMessage('Failed to delete user. Please try again.');\n      setSnackbarOpen(true);\n    }\n  };\n\n  // Initialize Yandex Map with all places\n  useEffect(() => {\n    let myMap = null;\n    if (places.length > 0 && mapRef.current) {\n      ymaps.ready(() => {\n        // Clean up the previous map instance if it exists\n        if (myMap) {\n          myMap.destroy();\n        }\n\n        // Initialize a new map instance\n        myMap = new ymaps.Map(mapRef.current, {\n          center: [places[0].longitude, places[0].latitude],\n          zoom: 12\n        });\n\n        // Add markers for all places\n        const placemarks = places.map(place => new ymaps.Placemark([place.longitude, place.latitude], {\n          balloonContent: `\n                <strong>${place.name}</strong><br>\n                Rating: ${place.average_rating || 'N/A'} (${place.total_reviews || 0} reviews)`\n        }, {\n          preset: 'islands#redDotIcon'\n        }));\n\n        // Add placemarks to the map\n        placemarks.forEach(placemark => {\n          myMap.geoObjects.add(placemark);\n        });\n      });\n    }\n\n    // Cleanup function to destroy the map instance\n    return () => {\n      if (myMap) {\n        myMap.destroy();\n      }\n    };\n  }, [places]);\n\n  // Handle Snackbar close\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      marginTop: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            padding: 3,\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            children: list ? list.list_name : 'Loading...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              children: places.map(place => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  component: Link,\n                  to: `/place/${place.id}`,\n                  sx: {\n                    textDecoration: 'none',\n                    color: 'inherit'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: place.name,\n                    secondary: place.address\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 25\n                  }, this), isAdmin && /*#__PURE__*/_jsxDEV(IconButton, {\n                    edge: \"end\",\n                    \"aria-label\": \"delete\",\n                    onClick: e => {\n                      e.preventDefault(); // Prevent navigation\n                      handleDeletePlace(place.id);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 278,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 23\n                }, this)]\n              }, place.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"New Place Name\",\n              value: newPlaceName,\n              onChange: e => setNewPlaceName(e.target.value),\n              sx: {\n                marginBottom: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleAddPlace,\n              children: \"Add Place\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            padding: 3,\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            children: \"Users Connected to the List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              children: users.map(user => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                  children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: user.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 25\n                  }, this), isAdmin && /*#__PURE__*/_jsxDEV(IconButton, {\n                    edge: \"end\",\n                    \"aria-label\": \"delete\",\n                    onClick: () => handleDeleteUser(user.id),\n                    children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 322,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 23\n                }, this)]\n              }, user.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"New User Username\",\n              value: newUsername,\n              onChange: e => setNewUsername(e.target.value),\n              sx: {\n                marginBottom: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleAddUser,\n              children: \"Add User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            padding: 2,\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Map of Places\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: mapRef,\n            style: {\n              width: '100%',\n              height: '400px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbarOpen,\n      autoHideDuration: 6000,\n      onClose: handleSnackbarClose,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleSnackbarClose,\n        severity: \"info\",\n        sx: {\n          width: '100%'\n        },\n        children: snackbarMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(ListInfo, \"E683BfDIrKQ1o8CgWWn8LW1xqFE=\", false, function () {\n  return [useParams];\n});\n_c = ListInfo;\nexport default ListInfo;\nvar _c;\n$RefreshReg$(_c, \"ListInfo\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","Link","Typography","Container","Paper","CircularProgress","Button","List","ListItem","ListItemText","Divider","Grid","Box","TextField","Snackbar","Alert","IconButton","DeleteIcon","axios","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","backendUrl","ListInfo","_s","id","list","setList","places","setPlaces","users","setUsers","loading","setLoading","newPlaceName","setNewPlaceName","newUsername","setNewUsername","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","isAdmin","setIsAdmin","mapRef","fetchListData","token","localStorage","getItem","decodedToken","userId","user_id","listResponse","get","data","placesResponse","usersResponse","adminStatusResponse","headers","Authorization","is_admin","error","console","handleAddPlace","searchResponse","params","name","foundPlaces","length","placeId","post","place_id","handleAddUser","username","handleDeletePlace","delete","handleDeleteUser","myMap","current","ymaps","ready","destroy","Map","center","longitude","latitude","zoom","placemarks","map","place","Placemark","balloonContent","average_rating","total_reviews","preset","forEach","placemark","geoObjects","add","handleSnackbarClose","maxWidth","sx","marginTop","children","container","spacing","item","xs","md","elevation","padding","borderRadius","variant","gutterBottom","list_name","fileName","_jsxFileName","lineNumber","columnNumber","component","to","textDecoration","color","primary","secondary","address","edge","onClick","e","preventDefault","fullWidth","label","value","onChange","target","marginBottom","user","ref","style","width","height","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["C:/Users/Ilya/places_project/src/scenes/features/ListInfo.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport {\r\n  Typography,\r\n  Container,\r\n  Paper,\r\n  CircularProgress,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Grid,\r\n  Box,\r\n  TextField,\r\n  Snackbar,\r\n  Alert,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete'; // Import the delete icon\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst backendUrl = \"https://places-project-6i0r.onrender.com\";\r\n\r\nconst ListInfo = () => {\r\n  const { id } = useParams(); // Get the list ID from the URL\r\n  const [list, setList] = useState(null);\r\n  const [places, setPlaces] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [newPlaceName, setNewPlaceName] = useState(''); // State for place name input\r\n  const [newUsername, setNewUsername] = useState(''); // State for username input\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false); // State for Snackbar\r\n  const [snackbarMessage, setSnackbarMessage] = useState(''); // Snackbar message\r\n  const [isAdmin, setIsAdmin] = useState(false); // State to track if the current user is an admin\r\n  const mapRef = useRef(null);\r\n\r\n  // Fetch list details, places, and users\r\n  useEffect(() => {\r\n    const fetchListData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const decodedToken = jwtDecode(token);\r\n        const userId = decodedToken.user_id;\r\n\r\n        // Fetch list details\r\n        const listResponse = await axios.get(`${backendUrl}/api/lists/${id}`);\r\n        setList(listResponse.data.list);\r\n\r\n        // Fetch places in the list\r\n        const placesResponse = await axios.get(`${backendUrl}/api/lists/${id}/places`);\r\n        setPlaces(placesResponse.data.places);\r\n\r\n        // Fetch users connected to the list\r\n        const usersResponse = await axios.get(`${backendUrl}/api/lists/${id}/users`);\r\n        setUsers(usersResponse.data.users);\r\n\r\n        // Fetch the current user's admin status for the list\r\n        const adminStatusResponse = await axios.get(`${backendUrl}/api/lists/${id}/admin-status`, {\r\n          headers: { Authorization: token },\r\n        });\r\n        setIsAdmin(adminStatusResponse.data.is_admin);\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching list data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchListData();\r\n  }, [id]);\r\n\r\n  // Handle adding a new place to the list\r\n  const handleAddPlace = async () => {\r\n    try {\r\n      // Search for the place by name\r\n      const searchResponse = await axios.get(`${backendUrl}/api/places`, {\r\n        params: { name: newPlaceName },\r\n      });\r\n\r\n      const foundPlaces = searchResponse.data.places;\r\n\r\n      if (foundPlaces.length === 0) {\r\n        // No place found\r\n        setSnackbarMessage('Place not found');\r\n        setSnackbarOpen(true);\r\n        return;\r\n      }\r\n\r\n      // Use the first matching place (you can add logic to handle multiple matches)\r\n      const placeId = foundPlaces[0].id;\r\n\r\n      // Add the place to the list\r\n      const token = localStorage.getItem('token');\r\n      await axios.post(\r\n        `${backendUrl}/api/lists/${id}/places`,\r\n        { place_id: placeId },\r\n        { headers: { Authorization: token } }\r\n      );\r\n\r\n      // Clear the input field\r\n      setNewPlaceName('');\r\n\r\n      // Refetch places after adding a new place\r\n      const placesResponse = await axios.get(`${backendUrl}/api/lists/${id}/places`);\r\n      setPlaces(placesResponse.data.places);\r\n\r\n      // Notify the user\r\n      setSnackbarMessage('Place added successfully');\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error('Error adding place to list:', error);\r\n      setSnackbarMessage('Failed to add place. Please try again.');\r\n      setSnackbarOpen(true);\r\n    }\r\n  };\r\n\r\n  // Handle adding a new user to the list\r\n  const handleAddUser = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      // Add the user to the list\r\n      await axios.post(\r\n        `${backendUrl}/api/lists/${id}/users`,\r\n        { username: newUsername },\r\n        { headers: { Authorization: token } }\r\n      );\r\n\r\n      // Clear the input field\r\n      setNewUsername('');\r\n\r\n      // Refetch users after adding a new user\r\n      const usersResponse = await axios.get(`${backendUrl}/api/lists/${id}/users`);\r\n      setUsers(usersResponse.data.users);\r\n\r\n      // Notify the user\r\n      setSnackbarMessage('User added successfully');\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error('Error adding user to list:', error);\r\n      setSnackbarMessage('Failed to add user. Please try again.');\r\n      setSnackbarOpen(true);\r\n    }\r\n  };\r\n\r\n  // Handle deleting a place from the list\r\n  const handleDeletePlace = async (placeId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      // Delete the place from the list\r\n      await axios.delete(`${backendUrl}/api/lists/${id}/places/${placeId}`, {\r\n        headers: { Authorization: token },\r\n      });\r\n\r\n      // Refetch places after deletion\r\n      const placesResponse = await axios.get(`${backendUrl}/api/lists/${id}/places`);\r\n      setPlaces(placesResponse.data.places);\r\n\r\n      // Notify the user\r\n      setSnackbarMessage('Place deleted successfully');\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error('Error deleting place:', error);\r\n      setSnackbarMessage('Failed to delete place. Please try again.');\r\n      setSnackbarOpen(true);\r\n    }\r\n  };\r\n\r\n  // Handle deleting a user from the list\r\n  const handleDeleteUser = async (userId) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n\r\n      // Delete the user from the list\r\n      await axios.delete(`${backendUrl}/api/lists/${id}/users/${userId}`, {\r\n        headers: { Authorization: token },\r\n      });\r\n\r\n      // Refetch users after deletion\r\n      const usersResponse = await axios.get(`${backendUrl}/api/lists/${id}/users`);\r\n      setUsers(usersResponse.data.users);\r\n\r\n      // Notify the user\r\n      setSnackbarMessage('User deleted successfully');\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      setSnackbarMessage('Failed to delete user. Please try again.');\r\n      setSnackbarOpen(true);\r\n    }\r\n  };\r\n\r\n  // Initialize Yandex Map with all places\r\n  useEffect(() => {\r\n    let myMap = null;\r\n\r\n    if (places.length > 0 && mapRef.current) {\r\n      ymaps.ready(() => {\r\n        // Clean up the previous map instance if it exists\r\n        if (myMap) {\r\n          myMap.destroy();\r\n        }\r\n\r\n        // Initialize a new map instance\r\n        myMap = new ymaps.Map(mapRef.current, {\r\n          center: [places[0].longitude, places[0].latitude],\r\n          zoom: 12,\r\n        });\r\n\r\n        // Add markers for all places\r\n        const placemarks = places.map((place) => (\r\n          new ymaps.Placemark(\r\n            [place.longitude, place.latitude],\r\n            {\r\n              balloonContent: `\r\n                <strong>${place.name}</strong><br>\r\n                Rating: ${place.average_rating || 'N/A'} (${place.total_reviews || 0} reviews)`\r\n            },\r\n            { preset: 'islands#redDotIcon' }\r\n          )\r\n        ));\r\n\r\n        // Add placemarks to the map\r\n        placemarks.forEach((placemark) => {\r\n          myMap.geoObjects.add(placemark);\r\n        });\r\n      });\r\n    }\r\n\r\n    // Cleanup function to destroy the map instance\r\n    return () => {\r\n      if (myMap) {\r\n        myMap.destroy();\r\n      }\r\n    };\r\n  }, [places]);\r\n\r\n  // Handle Snackbar close\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ marginTop: 4 }}>\r\n      <Grid container spacing={4}>\r\n        {/* Left Column: Places in the List */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper elevation={3} sx={{ padding: 3, borderRadius: 2 }}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              {list ? list.list_name : 'Loading...'}\r\n            </Typography>\r\n            {loading ? (\r\n              <CircularProgress />\r\n            ) : (\r\n              <>\r\n                <List>\r\n                  {places.map((place) => (\r\n                    <React.Fragment key={place.id}>\r\n                      <ListItem\r\n                        component={Link}\r\n                        to={`/place/${place.id}`}\r\n                        sx={{ textDecoration: 'none', color: 'inherit' }}\r\n                      >\r\n                        <ListItemText primary={place.name} secondary={place.address} />\r\n                        {isAdmin && (\r\n                          <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"delete\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault(); // Prevent navigation\r\n                              handleDeletePlace(place.id);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        )}\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </React.Fragment>\r\n                  ))}\r\n                </List>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"New Place Name\"\r\n                  value={newPlaceName}\r\n                  onChange={(e) => setNewPlaceName(e.target.value)}\r\n                  sx={{ marginBottom: 2 }}\r\n                />\r\n                <Button variant=\"contained\" onClick={handleAddPlace}>\r\n                  Add Place\r\n                </Button>\r\n              </>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Right Column: Users Connected to the List */}\r\n        <Grid item xs={12} md={6}>\r\n          <Paper elevation={3} sx={{ padding: 3, borderRadius: 2 }}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              Users Connected to the List\r\n            </Typography>\r\n            {loading ? (\r\n              <CircularProgress />\r\n            ) : (\r\n              <>\r\n                <List>\r\n                  {users.map((user) => (\r\n                    <React.Fragment key={user.id}>\r\n                      <ListItem>\r\n                        <ListItemText primary={user.username} />\r\n                        {isAdmin && (\r\n                          <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"delete\"\r\n                            onClick={() => handleDeleteUser(user.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        )}\r\n                      </ListItem>\r\n                      <Divider />\r\n                    </React.Fragment>\r\n                  ))}\r\n                </List>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"New User Username\"\r\n                  value={newUsername}\r\n                  onChange={(e) => setNewUsername(e.target.value)}\r\n                  sx={{ marginBottom: 2 }}\r\n                />\r\n                <Button variant=\"contained\" onClick={handleAddUser}>\r\n                  Add User\r\n                </Button>\r\n              </>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Bottom Section: Map */}\r\n        <Grid item xs={12}>\r\n          <Paper elevation={3} sx={{ padding: 2, borderRadius: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Map of Places\r\n            </Typography>\r\n            <div ref={mapRef} style={{ width: '100%', height: '400px' }}></div>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleSnackbarClose}\r\n      >\r\n        <Alert onClose={handleSnackbarClose} severity=\"info\" sx={{ width: '100%' }}>\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ListInfo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}